## Install

* npm

  ```bash
  npm install --save {{packageName}}
  ```

* yarn

  ```bash
  yarn add {{packageName}}
  ```


## Usage

[{{{packageName}}}][] has been integrated into [@yozora/parser][]{{#if inGfmEx}} / [@yozora/parser-gfm-ex][]{{/if}}{{#if inGfm}} / [@yozora/parser-gfm][]{{/if}},
so you can use `YozoraParser`{{#if inGfmEx}} / `GfmExParser`{{/if}}{{#if inGfm}} / `GfmParser`{{/if}} directly.

### Basic Usage

[{{{packageName}}}][] cannot be used alone, it needs to be
registered in *IParser* as a plugin-in before it can be used.

```typescript {4,9}
import { DefaultParser } from '@yozora/core-parser'
import ParagraphTokenizer from '@yozora/tokenizer-paragraph'
import TextTokenizer from '@yozora/tokenizer-text'
import {{{toPascalCase tokenizerName}}}Tokenizer from '{{{packageName}}}'

const parser = new DefaultParser()
  .useFallbackTokenizer(new ParagraphTokenizer())
  .useFallbackTokenizer(new TextTokenizer())
  .useTokenizer(new {{{toPascalCase tokenizerName}}}Tokenizer())

// parse source markdown content
parser.parse({{{usageDemoSourceContent}}})
```

### Use within [@yozora/parser][]

```typescript
import YozoraParser from '@yozora/parser'

const parser = new YozoraParser()

// parse source markdown content
parser.parse({{{usageDemoSourceContent}}})
```

### Use with [@yozora/parser-gfm][]

{{#if inGfm}}
```typescript
import GfmParser from '@yozora/parser-gfm'

const parser = new GfmParser()

// parse source markdown content
parser.parse({{{usageDemoSourceContent}}})
```
{{else}}
```typescript {2,5}
import GfmParser from '@yozora/parser-gfm'
import {{{toPascalCase tokenizerName}}}Tokenizer from '{{{packageName}}}'

const parser = new GfmParser()
parser.useTokenizer(new {{{toPascalCase tokenizerName}}}Tokenizer())

// parse source markdown content
parser.parse({{{usageDemoSourceContent}}})
```
{{/if}}

### Use within [@yozora/parser-gfm-ex][]

{{#if inGfmEx}}
```typescript
import GfmExParser from '@yozora/parser-gfm-ex'

const parser = new GfmExParser()

// parse source markdown content
parser.parse({{{usageDemoSourceContent}}})
```
{{else}}
```typescript {2,5}
import GfmExParser from '@yozora/parser-gfm-ex'
import {{{toPascalCase tokenizerName}}}Tokenizer from '{{{packageName}}}'

const parser = new GfmExParser()
parser.useTokenizer(new {{{toPascalCase tokenizerName}}}Tokenizer())

// parse source markdown content
parser.parse({{{usageDemoSourceContent}}})
```
{{/if}}

### Options

Name              | Type        | Required  | Default
:----------------:|:-----------:|:---------:|:--------------:
`name`            | `string`    | `false`   | `"{{{packageName}}}"`
`priority`        | `number`    | `false`   | `{{{tokenizerPriority}}}`

* `name`: The unique name of the tokenizer, used to bind the token it generates,
  to determine the tokenizer that should be called in each life cycle of the
  token in the entire *matching / parsing* phase.

* `priority`: Priority of the tokenizer, determine the order of processing,
  high priority priority execution. interruptable. In addition, in the `match-block`
  stage, a high-priority tokenizer can interrupt the matching process of a
  low-priority tokenizer.{{#if isInlineTokenizer}}

  **Exception:** Delimiters of type `full` are always processed before other type
  delimiters.

{{/if}}