{
  "title": "Basic",
  "cases": [
    {
      "description": "blank line",
      "input": "papa\n\n\n  ```tsx\n  import React, { useEffect, useRef } from 'react'\n  import isEqual from 'fast-deep-equal/react'\n\n  export function useDeepCompareEffect(\n    fn: React.EffectCallback,\n    deps: React.DependencyList,\n  ): void {\n    const signal = useRef<number>(0)\n    const prevDeps = useRef<React.DependencyList>(deps)\n\n    if (!isEqual(prevDeps.current, deps)) {\n      signal.current += 1\n    }\n    prevDeps.current = deps\n\n    useEffect(fn, [signal.current])\n  }\n  ```",
      "htmlAnswer": "<p>papa</pa>\n\n<pre><code>&lt;\n &gt;\n</code></pre>",
      "parseAnswer": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "papa",
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 5,
                    "offset": 4
                  }
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 6,
                "offset": 5
              }
            }
          },
          {
            "type": "code",
            "lang": "tsx",
            "meta": "",
            "value": "import React, { useEffect, useRef } from 'react'\nimport isEqual from 'fast-deep-equal/react'\n\nexport function useDeepCompareEffect(\n  fn: React.EffectCallback,\n  deps: React.DependencyList,\n): void {\n  const signal = useRef<number>(0)\n  const prevDeps = useRef<React.DependencyList>(deps)\n\n  if (!isEqual(prevDeps.current, deps)) {\n    signal.current += 1\n  }\n  prevDeps.current = deps\n\n  useEffect(fn, [signal.current])\n}\n",
            "position": {
              "start": {
                "line": 4,
                "column": 1,
                "offset": 7
              },
              "end": {
                "line": 22,
                "column": 6,
                "offset": 472
              }
            }
          }
        ],
        "position": {
          "start": {
            "line": 1,
            "column": 1,
            "offset": 0
          },
          "end": {
            "line": 22,
            "column": 6,
            "offset": 472
          }
        }
      }
    },
    {
      "description": "Tildes and backticks cannot be mixed",
      "input": "``~\nfoo\n~``",
      "htmlAnswer": "<p><code>~foo~</code></p>",
      "parseAnswer": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "inlineCode",
                "value": "~ foo ~",
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 3,
                    "column": 4,
                    "offset": 11
                  }
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 3,
                "column": 4,
                "offset": 11
              }
            }
          }
        ],
        "position": {
          "start": {
            "line": 1,
            "column": 1,
            "offset": 0
          },
          "end": {
            "line": 3,
            "column": 4,
            "offset": 11
          }
        }
      }
    }
  ]
}