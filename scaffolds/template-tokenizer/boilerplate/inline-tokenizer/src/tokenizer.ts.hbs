import type { IYastNode } from '@yozora/ast'
import type { INodePoint } from '@yozora/character'
import { AsciiCodePoint } from '@yozora/character'
import { calcEscapedStringFromNodePoints } from '@yozora/character'
import type {
  IMatchInlinePhaseApi,
  IParseInlinePhaseApi,
  IResultOfProcessSingleDelimiter,
  ITokenizer,
  ITokenizerMatchInlineHook,
  ITokenizerParseInlineHook,
} from '@yozora/core-tokenizer'
import { 
  BaseInlineTokenizer, 
  TokenizerPriority,
  eatOptionalWhitespaces,
} from '@yozora/core-tokenizer'
import type { IDelimiter, INode, IToken, ITokenizerProps, T } from './types'
import { {{{pascalCase tokenizerName}}}Type, uniqueName } from './types'

/**
 * Lexical Analyzer for {{{pascalCase tokenizerName}}}
 */
export class {{{pascalCase tokenizerName}}}Tokenizer
  extends BaseInlineTokenizer<IDelimiter>
  implements
    ITokenizer,
    ITokenizerMatchInlineHook<T, IDelimiter, IToken>,
    ITokenizerParseInlineHook<T, IToken, INode> {

  /* istanbul ignore next */
  constructor(props: ITokenizerProps = {}) {
    super({
      name: props.name ?? uniqueName,
      priority: props.priority ?? TokenizerPriority.ATOMIC,
    })
  }

  /**
   * @override
   * @see BaseInlineTokenizer
   */
  protected override _findDelimiter(
    startIndex: number,
    endIndex: number,
    api: Readonly<IMatchInlinePhaseApi>,
  ): IDelimiter | null {
    const nodePoints: ReadonlyArray<INodePoint> = api.getNodePoints()
    let i = eatOptionalWhitespaces(nodePoints, startIndex, endIndex)
    if (i + 3 >= endIndex) return null

    const marker = nodePoints[i].codePoint
    let c = marker
    if (
      marker !== AsciiCodePoint.QUESTION_MARK &&
      marker !== AsciiCodePoint.EXCLAMATION_MARK
    ) return null

    for (; i < endIndex; ++i) {
      c = nodePoints[i].codePoint
      if (c !== marker) break
    }
    if (i < endIndex) return null 

    const delimiter: IDelimiter = {
      type: 'full',
      startIndex,
      endIndex,
    }
    return delimiter
  }

  /**
   * @override
   * @see ITokenizerMatchInlineHook
   */
  public processSingleDelimiter(
    delimiter: IDelimiter,
    api: Readonly<IMatchInlinePhaseApi>,
  ): IResultOfProcessSingleDelimiter<T, IToken> {
    if (delimiter.type !== 'full') return []
    const token: IToken = {
      nodeType: {{{pascalCase tokenizerName}}}Type,
      startIndex: delimiter.startIndex,
      endIndex: delimiter.endIndex,
    }
    return [token]
  }

  /**
   * @override
   * @see ITokenizerParseInlineHook
   */
  public processToken(
    token: IToken,
    children: IYastNode[],
    api: Readonly<IParseInlinePhaseApi>,
  ): INode {
    const nodePoints: ReadonlyArray<INodePoint> = api.getNodePoints()
    const { startIndex, endIndex } = token
    let value: string = calcEscapedStringFromNodePoints(
      nodePoints,
      startIndex,
      endIndex
    )

    // Remove the spaces at the end of the line and beginning of the next line.
    value = value.replace(/[^\S\n]*\n[^\S\n]*/g, '\n')
    const node: INode = { type: {{{pascalCase tokenizerName}}}Type, value }
    return node
  }
}
