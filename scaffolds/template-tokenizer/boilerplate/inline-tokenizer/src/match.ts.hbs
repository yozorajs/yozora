import type { INodePoint } from '@yozora/character'
import { AsciiCodePoint } from '@yozora/character'
import type {
  IMatchInlineHookCreator,
  IResultOfProcessSingleDelimiter,
} from '@yozora/core-tokenizer'
import { eatOptionalWhitespaces, genFindDelimiter } from '@yozora/core-tokenizer'
import type { IDelimiter, IThis, IToken, T } from './types'
import { {{{pascalCase tokenizerName}}}Type } from './types'

export const match: IMatchInlineHookCreator<T, IDelimiter, IToken, IThis> = function (api) {
  return {
    findDelimiter: () => genFindDelimiter<IDelimiter>(_findDelimiter),
    processSingleDelimiter,
  }

  function _findDelimiter(startIndex: number, endIndex: number): IDelimiter | null {
    const nodePoints: ReadonlyArray<INodePoint> = api.getNodePoints()
    let i = eatOptionalWhitespaces(nodePoints, startIndex, endIndex)
    if (i + 3 >= endIndex) return null

    const marker = nodePoints[i].codePoint
    let c = marker
    if (
      marker !== AsciiCodePoint.QUESTION_MARK &&
      marker !== AsciiCodePoint.EXCLAMATION_MARK
    ) return null

    for (; i < endIndex; ++i) {
      c = nodePoints[i].codePoint
      if (c !== marker) break
    }
    if (i < endIndex) return null

    const delimiter: IDelimiter = {
      type: 'full',
      startIndex,
      endIndex,
    }
    return delimiter
  }

  function processSingleDelimiter(
    delimiter: IDelimiter
  ): IResultOfProcessSingleDelimiter<T, IToken> {
    if (delimiter.type !== 'full') return []
    const token: IToken = {
      nodeType: {{{pascalCase tokenizerName}}}Type,
      startIndex: delimiter.startIndex,
      endIndex: delimiter.endIndex,
    }
    return [token]
  }
}
