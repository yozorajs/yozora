import { YastNode, ThematicBreakType } from '@yozora/ast'
import { AsciiCodePoint, isLineEnding } from '@yozora/character'
import type {
  PhrasingContentLine,
  PostMatchBlockPhaseApi,
  ResultOfEatAndInterruptPreviousSibling,
  ResultOfEatContinuationText,
  ResultOfEatLazyContinuationText,
  ResultOfEatOpener,
  ResultOfParse,
  Tokenizer,
  TokenizerMatchBlockHook,
  TokenizerParseBlockHook,
  TokenizerPostMatchBlockHook,
  YastBlockToken,
} from '@yozora/core-tokenizer'
import {
  BaseBlockTokenizer,
  TokenizerPriority,
  calcEndYastNodePoint,
  calcStartYastNodePoint,
} from '@yozora/core-tokenizer'
import type { Node, T, Token, TokenizerProps } from './types'
import { uniqueName } from './types'

/**
 * Lexical Analyzer for {{{pascalCase tokenizerName}}}
 */
export class {{{pascalCase tokenizerName}}}Tokenizer
  extends BaseBlockTokenizer
  implements
    Tokenizer{{#if usingHooks}},{{/if}}
{{#if useTokenizerMatchBlockHook}}
    TokenizerMatchBlockHook<T, Token>{{#if TokenizerMatchBlockHook__isNotLastHook}},{{/if}}
{{/if}}
{{#if useTokenizerPostMatchBlockHook}}
    TokenizerPostMatchBlockHook{{#if TokenizerPostMatchBlockHook__isNotLastHook}},{{/if}}
{{/if}}
{{#if useTokenizerParseBlockHook}}
    TokenizerParseBlockHook<T, Token, Node>{{#if TokenizerParseBlockHook__isNotLastHook}},{{/if}}
{{/if}} {
  public readonly isContainingBlock = false

  /* istanbul ignore next */
  constructor(props: TokenizerProps = {}) {
    super({
      name: props.name ?? uniqueName,
      priority: props.priority ?? TokenizerPriority.ATOMIC,
    })
  }
{{#if useTokenizerMatchBlockHook}}

  /**
   * @override
   * @see TokenizerMatchBlockHook
   */
  public eatOpener(
    line: Readonly<PhrasingContentLine>,
    parentToken: Readonly<YastBlockToken>,
  ): ResultOfEatOpener<T, Token> {
    const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line
    if (firstNonWhitespaceIndex + 3 >= endIndex) return null

    let i = firstNonWhitespaceIndex
    const marker = nodePoints[i].codePoint
    let c = marker
    if (
      marker !== AsciiCodePoint.QUESTION_MARK &&
      marker !== AsciiCodePoint.EXCLAMATION_MARK
    ) return null

    for (; i < endIndex; ++i) {
      c = nodePoints[i].codePoint
      if (c !== marker) break
    } 
    if (i < endIndex && !isLineEnding(c)) return null

    const nextIndex = endIndex
    const token: Token = {
      nodeType: ThematicBreakType,
      position: {
        start: calcStartYastNodePoint(nodePoints, startIndex),
        end: calcEndYastNodePoint(nodePoints, nextIndex - 1),
      },
      marker,
      continuous: true,
    }

    return { token, nextIndex, saturated: true }
  }

  // /**
  //  * @override
  //  * @see TokenizerMatchBlockHook
  //  */
  // public eatAndInterruptPreviousSibling(
  //   line: Readonly<PhrasingContentLine>,
  //   prevSiblingToken: Readonly<YastBlockToken>,
  //   parentToken: Readonly<YastBlockToken>,
  // ): ResultOfEatAndInterruptPreviousSibling<T, Token> {
  //   const result = this.eatOpener(line, parentToken)
  //   if (result == null) return null
  //   return {
  //     token: result.token,
  //     nextIndex: result.nextIndex,
  //     remainingSibling: prevSiblingToken,
  //   }
  // }

  // /**
  //  * @override
  //  * @see TokenizerMatchBlockHook
  //  */
  // public eatContinuationText(
  //   line: Readonly<PhrasingContentLine>,
  //   token: Token,
  //   parentToken: Readonly<YastBlockToken>,
  // ): ResultOfEatContinuationText {
  //   return { status: 'notMatched' }
  // }

  // /**
  //  * @override
  //  * @see TokenizerMatchBlockHook
  //  */
  // public eatLazyContinuationText(
  //   line: Readonly<PhrasingContentLine>,
  //   token: Token,
  //   parentToken: Readonly<YastBlockToken>,
  // ): ResultOfEatLazyContinuationText {
  //   const result = this.eatContinuationText(line, token, parentToken)
  //   return result as ResultOfEatLazyContinuationText
  // }
{{/if}}
{{#if useTokenizerPostMatchBlockHook}}

  /**
   * @override
   * @see TokenizerPostMatchBlockHook
   */
  public transformMatch(
    tokens: ReadonlyArray<YastBlockToken>,
    api: Readonly<PostMatchBlockPhaseApi>
  ): YastBlockToken[] {
    return tokens.slice()
  }
{{/if}}
{{#if useTokenizerParseBlockHook}}

  /**
   * @override
   * @see TokenizerParseBlockHook
   */
  public parseBlock(
    token: Readonly<Token>,
    children?: YastNode[],
  ): ResultOfParse<T, Node> {
    const node: Node = { type: token.nodeType }
    return node
  }
{{/if}}
}
