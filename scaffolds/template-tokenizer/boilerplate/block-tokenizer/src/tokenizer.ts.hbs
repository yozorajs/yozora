import type { YastNode, YastNodeType } from '@yozora/ast'
import type { NodePoint } from '@yozora/character'
import type {
  Tokenizer,
  TokenizerMatchBlockHook,
  TokenizerParseBlockHook,
  TokenizerPostMatchBlockHook,
  PhrasingContentLine,
  ResultOfEatAndInterruptPreviousSibling,
  ResultOfEatContinuationText,
  ResultOfEatLazyContinuationText,
  ResultOfEatOpener,
  ResultOfParse,
  YastBlockState,
} from '@yozora/core-tokenizer'
import type {
  {{{pascalCase tokenizerName}}} as Node,
  {{{pascalCase tokenizerName}}}State as State,
  {{{pascalCase tokenizerName}}}Type as T,
} from './types'
import {
  calcEndYastNodePoint,
  calcStartYastNodePoint,
} from '@yozora/core-tokenizer'
import { {{{pascalCase tokenizerName}}}Type } from './types'


/**
 * Params for constructing {{{pascalCase tokenizerName}}}Tokenizer
 */
export interface {{{pascalCase tokenizerName}}}TokenizerProps {
  /**
   * Specify an array of YastNode types that can be interrupted by this
   * Tokenizer on match phase.
   */
  readonly interruptableTypes?: YastNodeType[]
}


/**
 * Lexical Analyzer for {{{pascalCase tokenizerName}}}
 */
export class {{{pascalCase tokenizerName}}}Tokenizer implements
  Tokenizer<T>{{#if usingHooks}},{{/if}}
{{#if useTokenizerMatchBlockHook}}
  TokenizerMatchBlockHook<T, State>{{#if TokenizerMatchBlockHook__isNotLastHook}},{{/if}}
{{/if}}
{{#if useTokenizerPostMatchBlockHook}}
  TokenizerPostMatchBlockHook{{#if TokenizerPostMatchBlockHook__isNotLastHook}},{{/if}}
{{/if}}
{{#if useTokenizerParseBlockHook}}
  TokenizerParseBlockHook<T, State, Node>{{#if TokenizerParseBlockHook__isNotLastHook}},{{/if}}
{{/if}}
{
  public readonly name = '{{{pascalCase tokenizerName}}}Tokenizer'
  public readonly recognizedTypes: T[] = [{{{pascalCase tokenizerName}}}Type]
  public readonly getContext: Tokenizer['getContext'] = () => null

  public readonly isContainerBlock = false
  public readonly interruptableTypes: ReadonlyArray<YastNodeType>

  /* istanbul ignore next */
  public constructor(props: {{{pascalCase tokenizerName}}}TokenizerProps = {}) {
    this.interruptableTypes = Array.isArray(props.interruptableTypes)
      ? [...props.interruptableTypes]
      : []
  }
{{#if useTokenizerMatchBlockHook}}

  /**
   * @override
   * @see TokenizerMatchBlockHook
   */
  public eatOpener(
    line: Readonly<PhrasingContentLine>,
    parentState: Readonly<YastBlockState>,
  ): ResultOfEatOpener<T, State> {
    const { nodePoints, startIndex, endIndex, firstNonWhitespaceIndex } = line
    if (firstNonWhitespaceIndex >= endIndex) return null

    const nextIndex = endIndex
    const state: State = {
      type: {{{pascalCase tokenizerName}}}Type,
      position: {
        start: calcStartYastNodePoint(nodePoints, startIndex),
        end: calcEndYastNodePoint(nodePoints, nextIndex - 1),
      },
      lines: [{ ...line }],
    }

    return { state, nextIndex }
  }

  // /**
  //  * @override
  //  * @see TokenizerMatchBlockHook
  //  */
  // public eatAndInterruptPreviousSibling(
  //   line: Readonly<PhrasingContentLine>,
  //   previousSiblingState: Readonly<YastBlockState>,
  //   parentState: Readonly<YastBlockState>,
  // ): ResultOfEatAndInterruptPreviousSibling<T, State> {
  //   return null
  // }

  // /**
  //  * @override
  //  * @see TokenizerMatchBlockHook
  //  */
  // public eatContinuationText(
  //   line: Readonly<PhrasingContentLine>,
  //   state: State,
  //   parentState: Readonly<YastBlockState>,
  // ): ResultOfEatContinuationText {
  //   return { status: 'notMatched' }
  // }

  // /**
  //  * @override
  //  * @see TokenizerMatchBlockHook
  //  */
  // public eatLazyContinuationText(
  //   line: Readonly<PhrasingContentLine>,
  //   state: State,
  //   parentState: Readonly<YastBlockState>,
  // ): ResultOfEatLazyContinuationText {
  //   const result = this.eatContinuationText(line, state, parentState)
  //   return result as ResultOfEatLazyContinuationText
  // }
{{/if}}
{{#if useTokenizerPostMatchBlockHook}}

  /**
   * @override
   * @see TokenizerPostMatchBlockHook
   */
  public transformMatch(
    states: ReadonlyArray<YastBlockState>,
    nodePoints: ReadonlyArray<NodePoint>,
  ): YastBlockState[] {
    return states.slice()
  }
{{/if}}
{{#if useTokenizerParseBlockHook}}

  /**
   * @override
   * @see TokenizerParseBlockHook
   */
  public parseBlock(
    state: Readonly<State>,
    children: YastNode[] | undefined,
    nodePoints: ReadonlyArray<NodePoint>,
  ): ResultOfParse<Node> {
    const node: Node = { type: state.type }
    return { classification: 'flow', node }
  }
{{/if}}
}
